// (c) Copyright Merative US L.P. and others 2020-2022 
//
// SPDX-Licence-Identifier: Apache 2.0

const express = require("express");
const fs = require("fs");
const http = require("http");
const https = require("https");
const path = require("path");
const swaggerUI = require("swagger-ui-express");

const config = require("./config/config");

const logger = require("./config/logger").getLogger("server");

// configure swagger
const swaggerDoc = require("./swagger.json");

// routes
const consentRequestRouter = require("./routes/consent-request");
const consentReceiptRouter = require("./routes/consent-receipt");
const consentInvitationRouter = require("./routes/consent-invitation");

const app = express();

// configure express
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.disable("x-powered-by");

// configure routes
app.use(
  "/collect-consent/api-docs",
  swaggerUI.serve,
  swaggerUI.setup(swaggerDoc)
);
app.use("/collect-consent/api/v1/consent-request", consentRequestRouter);
app.use("/collect-consent/api/v1/consent-receipt", consentReceiptRouter);
app.use("/collect-consent/api/v1/consent-invitation", consentInvitationRouter);

// TODO: health checks

app.use((_req, res) => {
  res.status(404).json({
    status: 404,
    message: "Not Found",
  });
});

app.use((err, _req, res) => {
  logger.error(err);

  res.status(500).json({
    status: 500,
    message: "Internal Server Error",
  });
});

logger.info("Starting server...");

/*
 * To launch HTTPS server it requires
 * private key (tls.key) and certificate (tls.crt).
 * For test and local development these files can be generated by openssl tool.
 *
 * openssl genrsa -out key.pem
 * openssl req -new -key key.pem -out csr.pem
 * openssl x509 -req -days 9999 -in csr.pem -signkey key.pem -out cert.pem
 * rm csr.pem
 *
 * openssl genrsa -des3 -out server.key 1024
 * openssl req -new -key server.key -out server.csr
 * cp server.key server.key.org
 * openssl rsa -in server.key.org -out tls.key
 * openssl x509 -req -days 3650 -in server.csr -signkey tls.key -out tls.crt
 * rm -rf server.key.org
 * rm -rf server.csr
 */
let server;
let statusMessage;

if (config.httpsEnabled) {
  const keyfile = path.join(__dirname, "ssl", "tls.key");
  const certFile = path.join(__dirname, "ssl", "tls.crt");

  const httpsOptions = {
    key: fs.readFileSync(keyfile),
    cert: fs.readFileSync(certFile),
  };

  server = https.createServer(httpsOptions, app);
  statusMessage = `HTTPS server started on port: ${config.port}`;
} else {
  server = http.createServer(app);
  statusMessage = `HTTP server up on port: ${config.port}`;
}

server.listen(config.port, () => {
  logger.info(statusMessage);
});

// Handle shutdown signals. Safely shutting down processes and closing connections.
const signalTraps = ["SIGTERM", "SIGINT", "SIGUSR2"];

signalTraps.forEach((type) => {
  process.once(type, async () => {
    try {
      logger.info(`Received kill '${type}' signal, shutting down gracefully`);
      server.close((err) => {
        if (err) {
          logger.error(`An error while shutting down: ${err}`);
          process.exit(1);
        }
        process.exit(0);
      });
      logger.info(`Stopping application on ${type} signal`);
    } finally {
      process.kill(process.pid, type);
    }
  });
});

module.exports = server;
